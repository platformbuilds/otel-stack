nameOverride: "miradorstack"
fullnameOverride: "miradorstack"

imagePullSecrets: []

commonLabels: {}
commonAnnotations: {}

ingress:
  enabled: false
  className: ""
  # Set host(s)! Example: otel.local, or ui.mycorp.com
  hosts:
    - host: ""
      paths:
        - path: /
          pathType: Prefix
  tls: []  # [{ hosts: [otel.local], secretName: otel-stack-tls }]

serviceAccount:
  create: true
  annotations: {}
  name: ""

backend:
  image:
    repository: platformbuilds/mirador-backend
    tag: latest
    pullPolicy: IfNotPresent
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8080
  resources:
    requests: { cpu: 100m, memory: 128Mi }
    limits:   { cpu: 500m, memory: 512Mi }
  podAnnotations: {}
  podLabels: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Environment for backend (mirrors your .env)
  env:
    HTTP_ADDR: ":8080"
    PROM_URL: "http://prometheus-k8s.monitoring:9090"
    VLOGS_URL: "http://victorialogs:9428"
    CH_HTTP_URL: "http://clickhouse.default:8123"
    CH_DATABASE: "default"
    DEMO_MODE: "false"
    DEFAULT_ROLE: "editor"
    CORS_ALLOW_ORIGINS: "*"
    CORS_ALLOW_HEADERS: "Authorization,Content-Type"
    CORS_ALLOW_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
    RATE_RPS: "30"
    RATE_BURST: "90"
  # Store CH creds in Secret (below)
  secretRefs:
    ch:
      enabled: true
      name: ""
      usernameKey: CH_USER
      passwordKey: CH_PASS
  # Liveness/readiness
  livenessProbe:
    httpGet: { path: /healthz, port: http }
    initialDelaySeconds: 10
    periodSeconds: 10
  readinessProbe:
    httpGet: { path: /readyz, port: http }
    initialDelaySeconds: 3
    periodSeconds: 5
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 70
    # targetMemoryUtilizationPercentage: 80
  extraEnv: []   # [{ name: FOO, value: BAR }]
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []

ui:
  image:
    repository: platformbuilds/mirador-ui
    tag: latest
    pullPolicy: IfNotPresent
  replicaCount: 2
  service:
    type: ClusterIP
    port: 80
  resources:
    requests: { cpu: 50m, memory: 64Mi }
    limits:   { cpu: 300m, memory: 256Mi }
  podAnnotations: {}
  podLabels: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    # Caddy will proxy /api to this address; set to backend service URL
    API_BASE: ""
  livenessProbe:
    httpGet: { path: /, port: http }
    initialDelaySeconds: 10
    periodSeconds: 10
  readinessProbe:
    httpGet: { path: /, port: http }
    initialDelaySeconds: 3
    periodSeconds: 5
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 70
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []

monitoring:
  servicemonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}